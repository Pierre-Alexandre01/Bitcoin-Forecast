name: Daily Bitcoin Forecast

on:
  schedule:
    - cron: "17 6 * * *"   # runs every day at 06:17 UTC
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  run-forecast:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python - << 'PY'
          import nltk
          nltk.download("vader_lexicon", quiet=True)
          PY

      - name: Run forecast
        run: python -u bitcoin_forecast.py

      # Turn metrics.json into LaTeX defs used by the report
      - name: Create inputs.tex from metrics.json
        run: |
          python - << 'PY'
          import json, os, sys
          p = "report/outputs/metrics.json"
          if not os.path.exists(p):
              sys.exit(f"❌ Missing {p}. Ensure your script writes metrics there.")
          with open(p) as f:
              m = json.load(f)
          def usd(x): return f"{x:,.2f}"
          lines = [
            f"\\def\\reportDate{{{m['reportDate']}}}",
            f"\\def\\spotUSD{{{usd(m['spotUSD'])}}}",
            f"\\def\\probUpOneDay{{{m['probUpOneDay']}}}",
            f"\\def\\sigmaOneDay{{{m['sigmaOneDay']}}}",
            f"\\def\\pOneMed{{{usd(m['p1']['med'])}}}",
            f"\\def\\pOneP10{{{usd(m['p1']['p10'])}}}",
            f"\\def\\pOneP90{{{usd(m['p1']['p90'])}}}",
            f"\\def\\pSevenMed{{{usd(m['p7']['med'])}}}",
            f"\\def\\pSevenP10{{{usd(m['p7']['p10'])}}}",
            f"\\def\\pSevenP90{{{usd(m['p7']['p90'])}}}",
            f"\\def\\pThirtyMed{{{usd(m['p30']['med'])}}}",
            f"\\def\\pThirtyP10{{{usd(m['p30']['p10'])}}}",
            f"\\def\\pThirtyP90{{{usd(m['p30']['p90'])}}}",
          ]
          with open("report/inputs.tex", "w") as f:
              f.write("\n".join(lines) + "\n")
          print("✅ Wrote report/inputs.tex")
          PY

      - name: Compile Beamer PDF
        uses: xu-cheng/latex-action@v3
        with:
          root_file: main.tex
          working_directory: report
          latexmk_use_xelatex: true

      - name: Upload PDF
        uses: actions/upload-artifact@v4
        with:
          name: bitcoin-forecast-report
          path: report/main.pdf

      - name: Upload outputs (PNGs/JSON)
        uses: actions/upload-artifact@v4
        with:
          name: btc-forecast-outputs
          path: report/outputs/**

        # OPTIONAL: configure credentials only if BOTH secrets are set
      - name: Configure Overleaf credentials (optional)
        run: |
          if [ -n "${{ secrets.OVERLEAF_GIT_URL }}" ] && [ -n "${{ secrets.OVERLEAF_TOKEN }}" ]; then
            echo "Configuring Overleaf credentials..."
            git config --global credential.helper store
            printf "https://git:%s@git.overleaf.com\n" "${{ secrets.OVERLEAF_TOKEN }}" > ~/.git-credentials
          else
            echo "Skipping credential config (missing OVERLEAF_GIT_URL or OVERLEAF_TOKEN)."
          fi

      # OPTIONAL: push report to Overleaf if URL secret exists (token may be inside URL or from the previous step)
      - name: Push to Overleaf (publish report + figures)
        run: |
          if [ -z "${{ secrets.OVERLEAF_GIT_URL }}" ]; then
            echo "Skipping Overleaf push (OVERLEAF_GIT_URL not set)."
            exit 0
          fi

          set -e
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@users.noreply.github.com"

          rm -rf /tmp/overleaf && mkdir -p /tmp/overleaf
          cp -r report /tmp/overleaf/
          cd /tmp/overleaf

          git init
          git add -A
          git commit -m "Auto-publish $(date -u +'%Y-%m-%d %H:%M UTC')"
          git branch -M master
          git remote add overleaf "${{ secrets.OVERLEAF_GIT_URL }}"
          git push -f overleaf master
